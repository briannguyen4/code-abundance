# This file should contain all the record creation needed to seed the database with its default values.
# The data can then be loaded with the rails db:seed command (or created alongside the database with db:setup).
#
# Examples:
# movies = Movie.create([{ name: 'Star Wars' }, { name: 'Lord of the Rings' }])
# Character.create(name: 'Luke', movie: movies.first)

Vote.destroy_all
Answer.destroy_all
Question.destroy_all
User.destroy_all

demo = User.create({email: "demouser@email.com", password: "password"})
user1 = User.create({email: "email1@email.com", password: "password"})
user2 = User.create({email: "email2@email.com", password: "password"})
user3 = User.create({email: "email3@email.com", password: "password"})
user4 = User.create({email: "email4@email.com", password: "password"})
user5 = User.create({email: "email5@email.com", password: "password"})
user6 = User.create({email: "email6@email.com", password: "password"})
user7 = User.create({email: "email7@email.com", password: "password"})
user8 = User.create({email: "email8@email.com", password: "password"})
user9 = User.create({email: "email9@email.com", password: "password"})
user10 = User.create({email: "email10@email.com", password: "password"})
user11 = User.create({email: "email11@email.com", password: "password"})
user12 = User.create({email: "email12@email.com", password: "password"})
user13 = User.create({email: "email13@email.com", password: "password"})
user14 = User.create({email: "email14@email.com", password: "password"})
user15 = User.create({email: "email15@email.com", password: "password"})
user16 = User.create({email: "email16@email.com", password: "password"})
user17 = User.create({email: "email17@email.com", password: "password"})
user18 = User.create({email: "email18@email.com", password: "password"})
user19 = User.create({email: "email19@email.com", password: "password"})
user20 = User.create({email: "email20@email.com", password: "password"})
user21 = User.create({email: "email21@email.com", password: "password"})
user22 = User.create({email: "email22@email.com", password: "password"})
user23 = User.create({email: "email23@email.com", password: "password"})
user24 = User.create({email: "email24@email.com", password: "password"})
user25 = User.create({email: "email25@email.com", password: "password"})
user26 = User.create({email: "email26@email.com", password: "password"})
user27 = User.create({email: "email27@email.com", password: "password"})
user28 = User.create({email: "email28@email.com", password: "password"})
user29 = User.create({email: "email29@email.com", password: "password"})
user30 = User.create({email: "email30@email.com", password: "password"})
user31 = User.create({email: "email31@email.com", password: "password"})
user32 = User.create({email: "email32@email.com", password: "password"})
user33 = User.create({email: "email33@email.com", password: "password"})
user34 = User.create({email: "email34@email.com", password: "password"})
user35 = User.create({email: "email35@email.com", password: "password"})
user36 = User.create({email: "email36@email.com", password: "password"})
user37 = User.create({email: "email37@email.com", password: "password"})
user38 = User.create({email: "email38@email.com", password: "password"})
user39 = User.create({email: "email39@email.com", password: "password"})
user40 = User.create({email: "email40@email.com", password: "password"})
user41 = User.create({email: "email41@email.com", password: "password"})
user42 = User.create({email: "email42@email.com", password: "password"})
user43 = User.create({email: "email43@email.com", password: "password"})
user44 = User.create({email: "email44@email.com", password: "password"})

q1 = Question.create({title: "Whats different between == and === ?", body: "Hello, whats the difference between == and === in JavaScript? I've seen != and !== operators as well. Are there more operators?", author_id: user1.id})
q2 = Question.create({title: "What are ownProps in react-redux?", body: "This is a test to see if I can properly create a question", author_id: user1.id})
q3 = Question.create({title: "Why is this.props.match.params empty when I pass in params", body: "I tried to pass params to this.props.match in my React component but the params still return as an empty object. Can anyone help me with figure out why?", author_id: user1.id})
q4 = Question.create({title: "How do you use CSS to get a nav bar to stay at the top of the page? ", body: "I have a navbar but for some reason it won't stay on the top of my page, how do I solve this with CSS?", author_id: user2.id})
q5 = Question.create({title: "Cannot read property x of undefined error, why?", body: "Hey, for some reason I keep getting this error when I try to key into my props, why is that?", author_id: user2.id})
q6 = Question.create({title: "How does the react and redux cycle work?", body: "I've recently started to learn react and redux but I still can't completely wrap my head around how it works, does anyone have a good high overview?", author_id: user2.id})
q7 = Question.create({title: "How to use a Rails engine in a rails engine", body: "We are creating an Rails 4 Engine to pull out some common functionality between our Rails apps. One thing that we are a bit confused is what if the Engine itself also has an Engine? Say, what if I wanted to put ActiveAdmin in it? Do we have to create a separate namespace just for the admin?
Also, what about the migrations for ActiveAdmin (and even Devise)? Should we put it in our Engine or do is it best practice to just say 'before using this engine, make sure you have devise/active admin installed'?", author_id: user22.id})
q8 = Question.create({title: "How to use concerns in Rails 4", body: "how am I supposed to use this feature, is there a convention on how to define the naming / class hierarchy in order to make it work? How can I include a concern in a model or controller?", author_id: user22.id})
q9 = Question.create({title: "Understanding the Rails Authenticity Token", body: "I am running into some issues regarding the Authenticity Token in Rails, as I have many times now. But I really don't want to just solve this problem and go on. I would really like to understand the Authenticity token. Well, my question is, do you have some complete source of information on this subject or would you spend your time to explain in details here?", author_id: user21.id})
q10 = Question.create({title: "Rails: How Does csrf_meta_tag Work?", body: "I'm genuinely curious. How does inserting csrf-param and csrf-token meta tags prevent CSRF? I tried Googling, but couldn't find anything.", author_id: user4.id})
q11 = Question.create({title: "How do I include a JavaScript file in another JavaScript file?", body: "Is there something in JavaScript similar to @import in CSS that allows you to include a JavaScript file inside another JavaScript file?", author_id: user8.id})
q12 = Question.create({title: "How is the 'use strict' statement interpreted in Node.js?", body: "Recently, I came across the statement 'use strict' as the first line inside every function and every .js file. How exactly is it is interpreted by Node.js?", author_id: user9.id})
q13 = Question.create({title: "Rails: How can I rename a database column in a Ruby on Rails migration?", body: "I accidently made a typo on a column. How do I update the database schema, using migration to rename this column?", author_id: user12.id})
q14 = Question.create({title: "What does “!--” do in JavaScript?", body: "I was following some code and was wanted to ask What does this command do?", author_id: user15.id})
q15 = Question.create({title: "How to convert a string to number in TypeScript?", body: "Given a string representation of a number, how can I convert it to number type in TypeScript?", author_id: user14.id})
q16 = Question.create({title: "What is a difference between action,reducer and store in redux?", body: "I am new to react/redux. I am trying to figure out how all the pieces in redux interact. The one thing giving me trouble is understanding the relation between actions and reducers,store.", author_id: user16.id})
q17 = Question.create({title: "What is the most efficient way to deep clone an object in JavaScript?", body: "What is the most efficient way to clone a JavaScript object? I've seen obj = eval(uneval(o)); being used, but that's non-standard and only supported by Firefox. </br> I've done things like obj = JSON.parse(JSON.stringify(o)); but question the efficiency. I've also seen recursive copying functions with various flaws. I'm surprised no canonical solution exists.", author_id: user31.id})
# q18 = Question.create({title: "", body: "", author_id: .id})
# q19 = Question.create({title: "", body: "", author_id: .id})
q20 = Question.create({title: "How to check if a value exists in an array in Ruby", body: "I have a value 'Dog' and an array ['Cat', 'Dog', 'Bird']. How do I check if it exists in the array without looping through it? Is there a simple way of checking if the value exists, nothing more?", author_id: user6.id})
q21 = Question.create({title: "Can you force a React component to rerender without calling setState?", body: "Do React components need to have state in order to rerender? Is there a way to force the component to update on demand without changing the state?", author_id: user19.id})
q22 = Question.create({title: "Redux - relation of reducers to actions", body: "I am new to react/redux. I am trying to figure out how all the pieces in redux interact. The one thing giving me trouble is understanding the relation between actions and reducers. When an action is called, how does the store know which reducer to use? Does it base it completely on the action type name? Do type names have to be unique? To whom or what does the reducer pass the new state object to, the store or the action? As I understand it, it goes like this: <ol><li>store.dispatch(action) is called</li><li>store finds the related reducer based on action type</li><li>Reducer clones the current state object, makes the changes, passes it back (somewhere)</li></ol>", author_id: user25.id})

a1 = Answer.create({body: "You should put all your engine dependencies (understand migrations, gems, lib, assets, ...) in ... well, your engine of course. You can have devise mounted as an engine in your engine. It may require some <a href=\"https://github.com/heartcombo/devise/wiki/How-To%3A-Use-devise-inside-a-mountable-engine\" rel=\"noopener noreferrer\" target=\"_blank\">special configuration</a> though.", question_id: q7.id, author_id: user21.id})
a2 = Answer.create({body: "So I found it out by myself. It is actually a pretty simple but powerful concept. It has to do with code reuse as in the example below. Basically, the idea is to extract common and / or context specific chunks of code in order to clean up the models and avoid them getting too fat and messy.", question_id: q8.id, author_id: user10.id})
a3 = Answer.create({body: "When the user views a form to create, update, or destroy a resource, the Rails app creates a random authenticity_token, stores this token in the session, and places it in a hidden field in the form. When the user submits the form, Rails looks for the authenticity_token, compares it to the one stored in the session, and if they match the request is allowed to continue.", question_id: q9.id, author_id: user22.id})
a4 = Answer.create({body: "The authenticity token is designed so that you know your form is being submitted from your website. It is generated from the machine on which it runs with a unique identifier that only your machine can know, thus helping prevent cross-site request forgery attacks.", question_id: q9.id, author_id: user20.id})
a5 = Answer.create({body: "The Authenticity Token is rails' method to prevent 'cross-site request forgery (CSRF or XSRF) attacks'. To put it simple, it makes sure that the PUT / POST / DELETE (methods that can modify content) requests to your web app are made from the client's browser and not from a third party (an attacker) that has access to a cookie created on the client side.", question_id: q9.id, author_id: user11.id})
a6 = Answer.create({body: "csrf_meta_tag is basically fulfilling the same thing as hidden form fields but is there to give javascript requests that aren't tied to a form an easy way of getting the token. If you use the jquery-ujs library the content of that meta tag is automatically added (as a request header) to any ajax requests made.", question_id: q10.id, author_id: user2.id})
a7 = Answer.create({body: "csrf_meta_tags are indications for ajax requests to use these as one of the form parameters to make a request to the server. Rails expects the csrf as part of your form body (params) to process your requests. Using these meta tags you can construct the form body or the csrf header to suit your needs. I hope this answer helps your question.", question_id: q10.id, author_id: user10.id})
a8 = Answer.create({body: "! inverts a value, and gives you the opposite boolean", question_id: q14.id, author_id: user10.id})
a9 = Answer.create({body: "! is the JavaScript NOT operator", question_id: q14.id, author_id: user12.id})
a10 = Answer.create({body: 'It enables the strict mode. Strict Mode is a feature that allows you to place a program, or a function, in a "strict" operating context. In strict operating context, the method form binds this to the objects as before. The function form binds this to undefined, not the global set objects.', question_id: q12.id, author_id: user19.id})
a11 = Answer.create({body: "Exactly like in JavaScript, you can use the parseInt or parseFloat functions, or simply use the unary + operator", question_id: q15.id, author_id: user15.id})
a12 = Answer.create({body: "Store is an object that holds the applications state data. Reducer is a function that returns some state data. Is triggered by an action type. Action is an object that tells the reducer how to change the state. It must contain a type property. It can optionally contain a payload property", question_id: q16.id, author_id: user12.id})
a13 = Answer.create({body: "<ol><li>how does the store know which reducer to use -> This is based entirely on the action type.</li><li>Do type names have to be unique? -> This is not a rule. But mostly, yes. Each action has a distinct type name and the corresponding reducer gets invoked.</li><li>To whom or what does the reducer pass the new state object to, the store or the action? -> The reducer does not pass the new state object anywhere. Basically, it triggers a state change event to all your react components that are listening to it. All components listening to the changed state get re-rendered, with the new version of the state, thereby updating your DOM.</li></ol>", question_id: q22.id, author_id: user11.id})
a14 = Answer.create({body: "According to the <a href=\"https://reactjs.org/docs/react-component.html#forceupdate\" rel=\"noopener noreferrer\" target=\"_blank\">documentation,</a> in your component you can call this.forceUpdate() to force a rerender.", question_id: q21.id, author_id: user17.id})
a15 = Answer.create({body: 'Are you looking for <a href=\"https://apidock.com/ruby/Array/include%3F/" rel=\"noopener noreferrer\" target=\"_blank\">include?</a>', question_id: q20.id, author_id: user32.id})


# <a href=\"https://apidock.com/ruby/Array/include%3F/" rel=\"noopener noreferrer\" target=\"_blank\">include?</a>

# v1 = Vote.create({value: 1, user_id: user1.id, voteable: q1})
